from aiogram import types
from game.roulette_game import RouletteGame, HandcuffResult, GameStatus
from game.item_manager import Item
from utils import get_or_create_user_game
from database import update_game_stats
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database import get_user_stats, get_top_players
from lexicon import HELP_TEXT
import asyncio


def create_main_menu_keyboard(game: RouletteGame) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    item_buttons = [KeyboardButton(text=item.value) for item in Item if game.player.items.items[item] > 0]
    main_buttons = [
        [KeyboardButton(text="/self"), KeyboardButton(text="/dealer")]
    ]
    if item_buttons:
        main_buttons.append(item_buttons)
    return ReplyKeyboardMarkup(keyboard=main_buttons, resize_keyboard=True)


async def send_message(message: types.Message, text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    game = get_or_create_user_game(message)
    keyboard = create_main_menu_keyboard(game)
    await message.answer(text, reply_markup=keyboard)


async def send_reload_message(message: types.Message, game: RouletteGame) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ"""
    await asyncio.sleep(0.2)
    if game.weapon.is_gun_reloaded:
        await send_message(message, game.get_reload_status())


async def handle_status(message: types.Message, game: RouletteGame) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä—ã"""
    result_message = {
        GameStatus.LOSS: "–í–∞–º –Ω–∞–Ω–µ—Å–ª–∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω. üíÄ",
        GameStatus.WIN: "–í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ–ª–Ω—É—é –ø–æ–±–µ–¥—É! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
        GameStatus.LEVEL_UP: f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ {game.level} —É—Ä–æ–≤–µ–Ω—å!",
        GameStatus.PLAYER_HIT: f"–ë–∞—Ö! –ò–≥—Ä–æ–∫: {game.player.health_bar}",
        GameStatus.DEALER_HIT: f"–ë–∞—Ö! –î–∏–ª–µ—Ä: {game.dealer.health_bar}",
        GameStatus.NO_DAMAGE: "–ö–ª–∞—Ü!"
    }

    await send_message(message, result_message[game.game_status])


async def end_game(message: types.Message, game: RouletteGame) -> bool:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ"""
    if game.game_status in (GameStatus.LOSS, GameStatus.WIN):
        win = game.game_status == GameStatus.WIN
        await message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
        await update_game_stats(message.from_user.id, win=win)
        return True
    return False


async def handle_handcuffs(message: types.Message, game: RouletteGame) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—Ä—É—á–Ω–∏–∫–æ–≤"""
    if game.handcuff_status == HandcuffResult.PLAYER_HANDCUFFED:
        await send_message(message, "–í—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —Ö–æ–¥.")
        await dealer_turn(message, game)

    if game.handcuff_status == HandcuffResult.DEALER_HANDCUFFED:
        await send_message(message, "–î–∏–ª–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.")
    elif game.handcuff_status == HandcuffResult.DEALER_TURN:
        await dealer_turn(message, game)


async def process_shoot(message: types.Message, game: RouletteGame) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞"""

    await handle_status(message, game)
    if await end_game(message, game):
        return
    await send_reload_message(message, game)
    await handle_handcuffs(message, game)


async def dealer_turn(message: types.Message, game: RouletteGame) -> None:
    """–•–æ–¥ –¥–∏–ª–µ—Ä–∞"""
    target, use_item = game.dealer_turn()
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    tasks = []
    for item in use_item:
        tasks.append(asyncio.create_task(send_message(message, item)))
        await asyncio.sleep(0.2)

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    await asyncio.gather(*tasks)

    await send_turn_message(message, target, game)
    await asyncio.sleep(0.5)
    await process_shoot(message, game)


async def send_turn_message(message: types.Message, target, game: RouletteGame) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã—Å—Ç—Ä–µ–ª–∞"""
    if target == game.player:
        await send_message(message, "–î–∏–ª–µ—Ä –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ –≤–∞—Å.")
    else:
        await send_message(message, "–î–∏–ª–µ—Ä –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ —Å–µ–±—è.")


async def roll_trigger(message: types.Message, target) -> None:
    """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫—É—Ä–æ–∫"""
    game = get_or_create_user_game(message)
    game.process_shoot(game.player, target)
    await process_shoot(message, game)


async def start_or_reset_game(message: types.Message) -> None:
    """–ù–∞—á–∞–ª–æ –∏–ª–∏ —Å–±—Ä–æ—Å –∏–≥—Ä—ã"""
    game = get_or_create_user_game(message)
    game.reset_game()
    await send_message(message, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å.")
    await send_reload_message(message, game)


async def handle_item_usage(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
    game = get_or_create_user_game(message)
    item = next(item for item in Item if item.value == message.text)
    if not game.player.use_item(item):
        await send_message(message, "–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        return

    item_messages = {
        Item.DISCARD: f"–í—ã –≤—ã–∫–∏–Ω—É–ª–∏ {game.weapon.last_bullet_type} –ø–∞—Ç—Ä–æ–Ω.",
        Item.MAGNIFYING_GLASS: f"–≠—Ç–æ {game.weapon.last_bullet_type} –ø–∞—Ç—Ä–æ–Ω.",
        Item.MEDKIT: f"–ò–≥—Ä–æ–∫: {game.player.health_bar}",
        Item.HANDCUFFS: "–î–∏–ª–µ—Ä –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥.",
        Item.SAW: "–£—Ä–æ–Ω –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ç—Ä–æ–Ω–∞ —É–¥–≤–æ–µ–Ω."
    }
    await send_message(message, item_messages.get(item, ""))
    await send_reload_message(message, game)


async def show_current_game_status(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"""
    game = get_or_create_user_game(message)
    await send_message(message, game.get_status())


async def show_total_game_stats(message: types.Message):
    stats = await get_user_stats(message.from_user.id)
    stats_message = (
        f"–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {stats[1]}\n"
        f"–ü–æ–±–µ–¥—ã: {stats[2]}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {stats[3]}\n"
    )
    await message.answer(stats_message)


async def send_help_message(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await message.answer(HELP_TEXT, parse_mode="HTML")


async def show_top_players(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥"""
    top_players = await get_top_players()

    top_players_message = "üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥:</b>\n\n"

    for rank, (user_id, wins) in enumerate(top_players, start=1):
        user = await message.bot.get_chat(user_id)
        top_players_message += f"{rank}. {user.full_name} - {wins} –ø–æ–±–µ–¥\n"

    await message.answer(top_players_message, parse_mode="HTML")
