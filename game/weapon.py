import random
from typing import NamedTuple
from game.settings import (MAGAZINE_MIN_SIZE, MAGAZINE_MAX_SIZE,
                           DAMAGE_NORMAL, DAMAGE_BOOSTED)


class BulletAnalysis(NamedTuple):
    analysis_successful: bool
    is_live_bullet: bool


class Weapon:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä—É–∂–∏–µ–º, –≤–∫–ª—é—á–∞—è –ø–∞—Ç—Ä–æ–Ω—ã –∏ –∏—Ö —Ç–∏–ø—ã."""

    def __init__(self):
        self.is_damage_boosted = False
        self.last_bullet_type = None
        self._reload_gun()

    def _reload_gun(self) -> None:
        """–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –æ—Ä—É–∂–∏—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ç—Ä–æ–Ω–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ."""
        self.magazine_size = random.randint(MAGAZINE_MIN_SIZE, MAGAZINE_MAX_SIZE)
        self.dummy_bullets = random.randint(1, self.magazine_size - 1)
        self.live_bullets = self.magazine_size - self.dummy_bullets
        self.bullets = [False] * self.dummy_bullets + [True] * self.live_bullets
        random.shuffle(self.bullets)
        self.is_gun_reloaded = True

    def pop_last_bullet(self) -> bool:
        """–í—ã–¥–∞—á–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ç—Ä–æ–Ω–∞. –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        bullet = self.bullets.pop()
        self.last_bullet_type = ['—Ö–æ–ª–æ—Å—Ç–æ–π', '–±–æ–µ–≤–æ–π'][bullet]
        if not self.bullets:
            self._reload_gun()
        return bullet

    def analyze_bullets(self) -> BulletAnalysis:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –æ—Ä—É–∂–∏–∏."""

        # –í—Å–µ –ø—É–ª–∏ —Ö–æ–ª–æ—Å—Ç—ã–µ
        if not any(self.bullets):
            return BulletAnalysis(True, False)

        # –í—Å–µ –ø—É–ª–∏ –±–æ–µ–≤—ã–µ
        if all(self.bullets):
            return BulletAnalysis(True, True)

        # –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è
        return BulletAnalysis(False, None)

    def damage_bullet(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–∏–ª–µ–Ω–∏—è –ø—É–ª–∏."""
        damage = DAMAGE_BOOSTED if self.is_damage_boosted else DAMAGE_NORMAL
        self.is_damage_boosted = False
        return damage

    def damage_boosted(self) -> None:
        """–£—Å–∏–ª–µ–Ω–∏–µ –ø—É–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞."""
        self.is_damage_boosted = True

    def last_bullet(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∞—Ç—Ä–æ–Ω–µ."""
        self.last_bullet_type = ['—Ö–æ–ª–æ—Å—Ç–æ–π', '–±–æ–µ–≤–æ–π'][self.bullets[-1]]
        return self.bullets[-1]

    def reload_message(self) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –æ—Ä—É–∂–∏—è."""
        self.is_gun_reloaded = False
        return (
            f"–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞! üîÑ\n"
            f"–ë–æ–µ–≤—ã—Ö –ø–∞—Ç—Ä–æ–Ω–æ–≤: {self.live_bullets}\n"
            f"–•–æ–ª–æ—Å—Ç—ã—Ö –ø–∞—Ç—Ä–æ–Ω–æ–≤: {self.dummy_bullets}\n"
        )
